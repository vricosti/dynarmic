/*******************************************************************************
 * Copyright 2019 FUJITSU LIMITED 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
    void gen0()
    {
//putConditional_branch0:0
b(EQ, 4*((1<<16)-1));
b(NE, 4*((1<<16)-1));
b(CS, 4*((1<<16)-1));
b(CC, 4*((1<<16)-1));
b(MI, 4*((1<<16)-1));
b(PL, 4*((1<<16)-1));
b(VS, 4*((1<<16)-1));
b(VC, 4*((1<<16)-1));
b(HI, 4*((1<<16)-1));
b(LS, 4*((1<<16)-1));
b(GE, 4*((1<<16)-1));
b(LT, 4*((1<<16)-1));
b(GT, 4*((1<<16)-1));
b(LE, 4*((1<<16)-1));
b(AL, 4*((1<<16)-1));
b(EQ, 4*((1<<16)-1));
b(EQ, -4*(1<<18));
b(EQ, -4*(1<<17));
b(EQ, -4*(1<<16));
b(EQ, -4*(1<<15));
b(EQ, -4*(1<<14));
b(EQ, -4*(1<<13));
b(EQ, -4*(1<<12));
b(EQ, -4*(1<<11));
b(EQ, -4*(1<<10));
b(EQ, -4*(1<<9));
b(EQ, -4*(1<<8));
b(EQ, -4*(1<<7));
b(EQ, -4*(1<<6));
b(EQ, -4*(1<<5));
b(EQ, -4*(1<<4));
b(EQ, -4*(1<<3));
b(EQ, -4*(1<<2));
b(EQ, -4*(1<<1));
b(EQ, -4*(1<<0));
b(EQ, 0);
b(EQ, 4*(1<<0));
b(EQ, 4*(1<<1));
b(EQ, 4*(1<<2));
b(EQ, 4*(1<<3));
b(EQ, 4*(1<<4));
b(EQ, 4*(1<<5));
b(EQ, 4*(1<<6));
b(EQ, 4*(1<<7));
b(EQ, 4*(1<<8));
b(EQ, 4*(1<<9));
b(EQ, 4*(1<<10));
b(EQ, 4*(1<<11));
b(EQ, 4*(1<<12));
b(EQ, 4*(1<<13));
b(EQ, 4*(1<<14));
b(EQ, 4*(1<<15));
b(EQ, 4*(1<<16));
b(EQ, 4*(1<<17));
b(EQ, 4*((1<<18)-1));
//Conditional_branch1:0
cbnz(w0, 4*((1<<16)-1) ); dump();
cbnz(w1, 4*((1<<16)-1) ); dump();
cbnz(w2, 4*((1<<16)-1) ); dump();
cbnz(w4, 4*((1<<16)-1) ); dump();
cbnz(w8, 4*((1<<16)-1) ); dump();
cbnz(w16, 4*((1<<16)-1) ); dump();
cbnz(w30, 4*((1<<16)-1) ); dump();
cbnz(w0, 4*((1<<16)-1) ); dump();
cbnz(w0, -4*(1<<18) ); dump();
cbnz(w0, -4*(1<<17) ); dump();
cbnz(w0, -4*(1<<16) ); dump();
cbnz(w0, -4*(1<<15) ); dump();
cbnz(w0, -4*(1<<14) ); dump();
cbnz(w0, -4*(1<<13) ); dump();
cbnz(w0, -4*(1<<12) ); dump();
cbnz(w0, -4*(1<<11) ); dump();
cbnz(w0, -4*(1<<10) ); dump();
cbnz(w0, -4*(1<<9) ); dump();
cbnz(w0, -4*(1<<8) ); dump();
cbnz(w0, -4*(1<<7) ); dump();
cbnz(w0, -4*(1<<6) ); dump();
cbnz(w0, -4*(1<<5) ); dump();
cbnz(w0, -4*(1<<4) ); dump();
cbnz(w0, -4*(1<<3) ); dump();
cbnz(w0, -4*(1<<2) ); dump();
cbnz(w0, -4*(1<<1) ); dump();
cbnz(w0, -4*(1<<0) ); dump();
cbnz(w0, 0 ); dump();
cbnz(w0, 4*(1<<0) ); dump();
cbnz(w0, 4*(1<<1) ); dump();
cbnz(w0, 4*(1<<2) ); dump();
cbnz(w0, 4*(1<<3) ); dump();
cbnz(w0, 4*(1<<4) ); dump();
cbnz(w0, 4*(1<<5) ); dump();
cbnz(w0, 4*(1<<6) ); dump();
cbnz(w0, 4*(1<<7) ); dump();
cbnz(w0, 4*(1<<8) ); dump();
cbnz(w0, 4*(1<<9) ); dump();
cbnz(w0, 4*(1<<10) ); dump();
cbnz(w0, 4*(1<<11) ); dump();
cbnz(w0, 4*(1<<12) ); dump();
cbnz(w0, 4*(1<<13) ); dump();
cbnz(w0, 4*(1<<14) ); dump();
cbnz(w0, 4*(1<<15) ); dump();
cbnz(w0, 4*(1<<16) ); dump();
cbnz(w0, 4*(1<<17) ); dump();
cbnz(w0, 4*((1<<18)-1) ); dump();
//Conditional_branch1:1
cbnz(x7, 4*((1<<16)-1) ); dump();
cbnz(x0, 4*((1<<16)-1) ); dump();
cbnz(x1, 4*((1<<16)-1) ); dump();
cbnz(x2, 4*((1<<16)-1) ); dump();
cbnz(x4, 4*((1<<16)-1) ); dump();
cbnz(x8, 4*((1<<16)-1) ); dump();
cbnz(x16, 4*((1<<16)-1) ); dump();
cbnz(x30, 4*((1<<16)-1) ); dump();
cbnz(x7, 4*((1<<16)-1) ); dump();
cbnz(x7, -4*(1<<18) ); dump();
cbnz(x7, -4*(1<<17) ); dump();
cbnz(x7, -4*(1<<16) ); dump();
cbnz(x7, -4*(1<<15) ); dump();
cbnz(x7, -4*(1<<14) ); dump();
cbnz(x7, -4*(1<<13) ); dump();
cbnz(x7, -4*(1<<12) ); dump();
cbnz(x7, -4*(1<<11) ); dump();
cbnz(x7, -4*(1<<10) ); dump();
cbnz(x7, -4*(1<<9) ); dump();
cbnz(x7, -4*(1<<8) ); dump();
cbnz(x7, -4*(1<<7) ); dump();
cbnz(x7, -4*(1<<6) ); dump();
cbnz(x7, -4*(1<<5) ); dump();
cbnz(x7, -4*(1<<4) ); dump();
cbnz(x7, -4*(1<<3) ); dump();
cbnz(x7, -4*(1<<2) ); dump();
cbnz(x7, -4*(1<<1) ); dump();
cbnz(x7, -4*(1<<0) ); dump();
cbnz(x7, 0 ); dump();
cbnz(x7, 4*(1<<0) ); dump();
cbnz(x7, 4*(1<<1) ); dump();
cbnz(x7, 4*(1<<2) ); dump();
cbnz(x7, 4*(1<<3) ); dump();
cbnz(x7, 4*(1<<4) ); dump();
cbnz(x7, 4*(1<<5) ); dump();
cbnz(x7, 4*(1<<6) ); dump();
cbnz(x7, 4*(1<<7) ); dump();
cbnz(x7, 4*(1<<8) ); dump();
cbnz(x7, 4*(1<<9) ); dump();
cbnz(x7, 4*(1<<10) ); dump();
cbnz(x7, 4*(1<<11) ); dump();
cbnz(x7, 4*(1<<12) ); dump();
cbnz(x7, 4*(1<<13) ); dump();
cbnz(x7, 4*(1<<14) ); dump();
cbnz(x7, 4*(1<<15) ); dump();
cbnz(x7, 4*(1<<16) ); dump();
cbnz(x7, 4*(1<<17) ); dump();
cbnz(x7, 4*((1<<18)-1) ); dump();
//Conditional_branch2:0
cbz(w0, 4*((1<<16)-1) ); dump();
cbz(w1, 4*((1<<16)-1) ); dump();
cbz(w2, 4*((1<<16)-1) ); dump();
cbz(w4, 4*((1<<16)-1) ); dump();
cbz(w8, 4*((1<<16)-1) ); dump();
cbz(w16, 4*((1<<16)-1) ); dump();
cbz(w30, 4*((1<<16)-1) ); dump();
cbz(w0, 4*((1<<16)-1) ); dump();
cbz(w0, -4*(1<<18) ); dump();
cbz(w0, -4*(1<<17) ); dump();
cbz(w0, -4*(1<<16) ); dump();
cbz(w0, -4*(1<<15) ); dump();
cbz(w0, -4*(1<<14) ); dump();
cbz(w0, -4*(1<<13) ); dump();
cbz(w0, -4*(1<<12) ); dump();
cbz(w0, -4*(1<<11) ); dump();
cbz(w0, -4*(1<<10) ); dump();
cbz(w0, -4*(1<<9) ); dump();
cbz(w0, -4*(1<<8) ); dump();
cbz(w0, -4*(1<<7) ); dump();
cbz(w0, -4*(1<<6) ); dump();
cbz(w0, -4*(1<<5) ); dump();
cbz(w0, -4*(1<<4) ); dump();
cbz(w0, -4*(1<<3) ); dump();
cbz(w0, -4*(1<<2) ); dump();
cbz(w0, -4*(1<<1) ); dump();
cbz(w0, -4*(1<<0) ); dump();
cbz(w0, 0 ); dump();
cbz(w0, 4*(1<<0) ); dump();
cbz(w0, 4*(1<<1) ); dump();
cbz(w0, 4*(1<<2) ); dump();
cbz(w0, 4*(1<<3) ); dump();
cbz(w0, 4*(1<<4) ); dump();
cbz(w0, 4*(1<<5) ); dump();
cbz(w0, 4*(1<<6) ); dump();
cbz(w0, 4*(1<<7) ); dump();
cbz(w0, 4*(1<<8) ); dump();
cbz(w0, 4*(1<<9) ); dump();
cbz(w0, 4*(1<<10) ); dump();
cbz(w0, 4*(1<<11) ); dump();
cbz(w0, 4*(1<<12) ); dump();
cbz(w0, 4*(1<<13) ); dump();
cbz(w0, 4*(1<<14) ); dump();
cbz(w0, 4*(1<<15) ); dump();
cbz(w0, 4*(1<<16) ); dump();
cbz(w0, 4*(1<<17) ); dump();
cbz(w0, 4*((1<<18)-1) ); dump();
//Conditional_branch2:1
cbz(x7, 4*((1<<16)-1) ); dump();
cbz(x0, 4*((1<<16)-1) ); dump();
cbz(x1, 4*((1<<16)-1) ); dump();
cbz(x2, 4*((1<<16)-1) ); dump();
cbz(x4, 4*((1<<16)-1) ); dump();
cbz(x8, 4*((1<<16)-1) ); dump();
cbz(x16, 4*((1<<16)-1) ); dump();
cbz(x30, 4*((1<<16)-1) ); dump();
cbz(x7, 4*((1<<16)-1) ); dump();
cbz(x7, -4*(1<<18) ); dump();
cbz(x7, -4*(1<<17) ); dump();
cbz(x7, -4*(1<<16) ); dump();
cbz(x7, -4*(1<<15) ); dump();
cbz(x7, -4*(1<<14) ); dump();
cbz(x7, -4*(1<<13) ); dump();
cbz(x7, -4*(1<<12) ); dump();
cbz(x7, -4*(1<<11) ); dump();
cbz(x7, -4*(1<<10) ); dump();
cbz(x7, -4*(1<<9) ); dump();
cbz(x7, -4*(1<<8) ); dump();
cbz(x7, -4*(1<<7) ); dump();
cbz(x7, -4*(1<<6) ); dump();
cbz(x7, -4*(1<<5) ); dump();
cbz(x7, -4*(1<<4) ); dump();
cbz(x7, -4*(1<<3) ); dump();
cbz(x7, -4*(1<<2) ); dump();
cbz(x7, -4*(1<<1) ); dump();
cbz(x7, -4*(1<<0) ); dump();
cbz(x7, 0 ); dump();
cbz(x7, 4*(1<<0) ); dump();
cbz(x7, 4*(1<<1) ); dump();
cbz(x7, 4*(1<<2) ); dump();
cbz(x7, 4*(1<<3) ); dump();
cbz(x7, 4*(1<<4) ); dump();
cbz(x7, 4*(1<<5) ); dump();
cbz(x7, 4*(1<<6) ); dump();
cbz(x7, 4*(1<<7) ); dump();
cbz(x7, 4*(1<<8) ); dump();
cbz(x7, 4*(1<<9) ); dump();
cbz(x7, 4*(1<<10) ); dump();
cbz(x7, 4*(1<<11) ); dump();
cbz(x7, 4*(1<<12) ); dump();
cbz(x7, 4*(1<<13) ); dump();
cbz(x7, 4*(1<<14) ); dump();
cbz(x7, 4*(1<<15) ); dump();
cbz(x7, 4*(1<<16) ); dump();
cbz(x7, 4*(1<<17) ); dump();
cbz(x7, 4*((1<<18)-1) ); dump();
//Conditional_branch3:0
tbnz(w7, 7, 4*((1<<10)-1) ); dump();
tbnz(w0, 7, 4*((1<<10)-1) ); dump();
tbnz(w1, 7, 4*((1<<10)-1) ); dump();
tbnz(w2, 7, 4*((1<<10)-1) ); dump();
tbnz(w4, 7, 4*((1<<10)-1) ); dump();
tbnz(w8, 7, 4*((1<<10)-1) ); dump();
tbnz(w16, 7, 4*((1<<10)-1) ); dump();
tbnz(w30, 7, 4*((1<<10)-1) ); dump();
tbnz(wzr, 7, 4*((1<<10)-1) ); dump();
tbnz(w7, 7, 4*((1<<10)-1) ); dump();
tbnz(w7, 0, 4*((1<<10)-1) ); dump();
tbnz(w7, 1, 4*((1<<10)-1) ); dump();
tbnz(w7, 2, 4*((1<<10)-1) ); dump();
tbnz(w7, 4, 4*((1<<10)-1) ); dump();
tbnz(w7, 8, 4*((1<<10)-1) ); dump();
tbnz(w7, 16, 4*((1<<10)-1) ); dump();
tbnz(w7, 31, 4*((1<<10)-1) ); dump();
tbnz(w7, 7, 4*((1<<10)-1) ); dump();
tbnz(w7, 7, -4*(1<<13) ); dump();
tbnz(w7, 7, -4*(1<<12) ); dump();
tbnz(w7, 7, -4*(1<<11) ); dump();
tbnz(w7, 7, -4*(1<<10) ); dump();
tbnz(w7, 7, -4*(1<<9) ); dump();
tbnz(w7, 7, -4*(1<<8) ); dump();
tbnz(w7, 7, -4*(1<<7) ); dump();
tbnz(w7, 7, -4*(1<<6) ); dump();
tbnz(w7, 7, -4*(1<<5) ); dump();
tbnz(w7, 7, -4*(1<<4) ); dump();
tbnz(w7, 7, -4*(1<<3) ); dump();
tbnz(w7, 7, -4*(1<<2) ); dump();
tbnz(w7, 7, -4*(1<<1) ); dump();
tbnz(w7, 7, -4*(1<<0) ); dump();
tbnz(w7, 7, 0 ); dump();
tbnz(w7, 7, 4*(1<<0) ); dump();
tbnz(w7, 7, 4*(1<<1) ); dump();
tbnz(w7, 7, 4*(1<<2) ); dump();
tbnz(w7, 7, 4*(1<<3) ); dump();
tbnz(w7, 7, 4*(1<<4) ); dump();
tbnz(w7, 7, 4*(1<<5) ); dump();
tbnz(w7, 7, 4*(1<<6) ); dump();
tbnz(w7, 7, 4*(1<<7) ); dump();
tbnz(w7, 7, 4*(1<<8) ); dump();
tbnz(w7, 7, 4*(1<<9) ); dump();
tbnz(w7, 7, 4*(1<<10) ); dump();
tbnz(w7, 7, 4*(1<<11) ); dump();
tbnz(w7, 7, 4*(1<<12) ); dump();
tbnz(w7, 7, 4*((1<<13)-1) ); dump();
//Conditional_branch3:1
tbnz(x3, 7, 4*((1<<10)-1) ); dump();
tbnz(x0, 7, 4*((1<<10)-1) ); dump();
tbnz(x1, 7, 4*((1<<10)-1) ); dump();
tbnz(x2, 7, 4*((1<<10)-1) ); dump();
tbnz(x4, 7, 4*((1<<10)-1) ); dump();
tbnz(x8, 7, 4*((1<<10)-1) ); dump();
tbnz(x16, 7, 4*((1<<10)-1) ); dump();
tbnz(x30, 7, 4*((1<<10)-1) ); dump();
tbnz(xzr, 7, 4*((1<<10)-1) ); dump();
tbnz(x3, 7, 4*((1<<10)-1) ); dump();
tbnz(x3, 0, 4*((1<<10)-1) ); dump();
tbnz(x3, 1, 4*((1<<10)-1) ); dump();
tbnz(x3, 2, 4*((1<<10)-1) ); dump();
tbnz(x3, 4, 4*((1<<10)-1) ); dump();
tbnz(x3, 8, 4*((1<<10)-1) ); dump();
tbnz(x3, 16, 4*((1<<10)-1) ); dump();
tbnz(x3, 32, 4*((1<<10)-1) ); dump();
tbnz(x3, 63, 4*((1<<10)-1) ); dump();
tbnz(x3, 7, 4*((1<<10)-1) ); dump();
tbnz(x3, 7, -4*(1<<13) ); dump();
tbnz(x3, 7, -4*(1<<12) ); dump();
tbnz(x3, 7, -4*(1<<11) ); dump();
tbnz(x3, 7, -4*(1<<10) ); dump();
tbnz(x3, 7, -4*(1<<9) ); dump();
tbnz(x3, 7, -4*(1<<8) ); dump();
tbnz(x3, 7, -4*(1<<7) ); dump();
tbnz(x3, 7, -4*(1<<6) ); dump();
tbnz(x3, 7, -4*(1<<5) ); dump();
tbnz(x3, 7, -4*(1<<4) ); dump();
tbnz(x3, 7, -4*(1<<3) ); dump();
tbnz(x3, 7, -4*(1<<2) ); dump();
tbnz(x3, 7, -4*(1<<1) ); dump();
tbnz(x3, 7, -4*(1<<0) ); dump();
tbnz(x3, 7, 0 ); dump();
tbnz(x3, 7, 4*(1<<0) ); dump();
tbnz(x3, 7, 4*(1<<1) ); dump();
tbnz(x3, 7, 4*(1<<2) ); dump();
tbnz(x3, 7, 4*(1<<3) ); dump();
tbnz(x3, 7, 4*(1<<4) ); dump();
tbnz(x3, 7, 4*(1<<5) ); dump();
tbnz(x3, 7, 4*(1<<6) ); dump();
tbnz(x3, 7, 4*(1<<7) ); dump();
tbnz(x3, 7, 4*(1<<8) ); dump();
tbnz(x3, 7, 4*(1<<9) ); dump();
tbnz(x3, 7, 4*(1<<10) ); dump();
tbnz(x3, 7, 4*(1<<11) ); dump();
tbnz(x3, 7, 4*(1<<12) ); dump();
tbnz(x3, 7, 4*((1<<13)-1) ); dump();
//Conditional_branch4:0
tbz(w7, 7, 4*((1<<10)-1) ); dump();
tbz(w0, 7, 4*((1<<10)-1) ); dump();
tbz(w1, 7, 4*((1<<10)-1) ); dump();
tbz(w2, 7, 4*((1<<10)-1) ); dump();
tbz(w4, 7, 4*((1<<10)-1) ); dump();
tbz(w8, 7, 4*((1<<10)-1) ); dump();
tbz(w16, 7, 4*((1<<10)-1) ); dump();
tbz(w30, 7, 4*((1<<10)-1) ); dump();
tbz(wzr, 7, 4*((1<<10)-1) ); dump();
tbz(w7, 7, 4*((1<<10)-1) ); dump();
tbz(w7, 0, 4*((1<<10)-1) ); dump();
tbz(w7, 1, 4*((1<<10)-1) ); dump();
tbz(w7, 2, 4*((1<<10)-1) ); dump();
tbz(w7, 4, 4*((1<<10)-1) ); dump();
tbz(w7, 8, 4*((1<<10)-1) ); dump();
tbz(w7, 16, 4*((1<<10)-1) ); dump();
tbz(w7, 31, 4*((1<<10)-1) ); dump();
tbz(w7, 7, 4*((1<<10)-1) ); dump();
tbz(w7, 7, -4*(1<<13) ); dump();
tbz(w7, 7, -4*(1<<12) ); dump();
tbz(w7, 7, -4*(1<<11) ); dump();
tbz(w7, 7, -4*(1<<10) ); dump();
tbz(w7, 7, -4*(1<<9) ); dump();
tbz(w7, 7, -4*(1<<8) ); dump();
tbz(w7, 7, -4*(1<<7) ); dump();
tbz(w7, 7, -4*(1<<6) ); dump();
tbz(w7, 7, -4*(1<<5) ); dump();
tbz(w7, 7, -4*(1<<4) ); dump();
tbz(w7, 7, -4*(1<<3) ); dump();
tbz(w7, 7, -4*(1<<2) ); dump();
tbz(w7, 7, -4*(1<<1) ); dump();
tbz(w7, 7, -4*(1<<0) ); dump();
tbz(w7, 7, 0 ); dump();
tbz(w7, 7, 4*(1<<0) ); dump();
tbz(w7, 7, 4*(1<<1) ); dump();
tbz(w7, 7, 4*(1<<2) ); dump();
tbz(w7, 7, 4*(1<<3) ); dump();
tbz(w7, 7, 4*(1<<4) ); dump();
tbz(w7, 7, 4*(1<<5) ); dump();
tbz(w7, 7, 4*(1<<6) ); dump();
tbz(w7, 7, 4*(1<<7) ); dump();
tbz(w7, 7, 4*(1<<8) ); dump();
tbz(w7, 7, 4*(1<<9) ); dump();
tbz(w7, 7, 4*(1<<10) ); dump();
tbz(w7, 7, 4*(1<<11) ); dump();
tbz(w7, 7, 4*(1<<12) ); dump();
tbz(w7, 7, 4*((1<<13)-1) ); dump();
//Conditional_branch4:1
tbz(x3, 7, 4*((1<<10)-1) ); dump();
tbz(x0, 7, 4*((1<<10)-1) ); dump();
tbz(x1, 7, 4*((1<<10)-1) ); dump();
tbz(x2, 7, 4*((1<<10)-1) ); dump();
tbz(x4, 7, 4*((1<<10)-1) ); dump();
tbz(x8, 7, 4*((1<<10)-1) ); dump();
tbz(x16, 7, 4*((1<<10)-1) ); dump();
tbz(x30, 7, 4*((1<<10)-1) ); dump();
tbz(xzr, 7, 4*((1<<10)-1) ); dump();
tbz(x3, 7, 4*((1<<10)-1) ); dump();
tbz(x3, 0, 4*((1<<10)-1) ); dump();
tbz(x3, 1, 4*((1<<10)-1) ); dump();
tbz(x3, 2, 4*((1<<10)-1) ); dump();
tbz(x3, 4, 4*((1<<10)-1) ); dump();
tbz(x3, 8, 4*((1<<10)-1) ); dump();
tbz(x3, 16, 4*((1<<10)-1) ); dump();
tbz(x3, 32, 4*((1<<10)-1) ); dump();
tbz(x3, 63, 4*((1<<10)-1) ); dump();
tbz(x3, 7, 4*((1<<10)-1) ); dump();
tbz(x3, 7, -4*(1<<13) ); dump();
tbz(x3, 7, -4*(1<<12) ); dump();
tbz(x3, 7, -4*(1<<11) ); dump();
tbz(x3, 7, -4*(1<<10) ); dump();
tbz(x3, 7, -4*(1<<9) ); dump();
tbz(x3, 7, -4*(1<<8) ); dump();
tbz(x3, 7, -4*(1<<7) ); dump();
tbz(x3, 7, -4*(1<<6) ); dump();
tbz(x3, 7, -4*(1<<5) ); dump();
tbz(x3, 7, -4*(1<<4) ); dump();
tbz(x3, 7, -4*(1<<3) ); dump();
tbz(x3, 7, -4*(1<<2) ); dump();
tbz(x3, 7, -4*(1<<1) ); dump();
tbz(x3, 7, -4*(1<<0) ); dump();
tbz(x3, 7, 0 ); dump();
tbz(x3, 7, 4*(1<<0) ); dump();
tbz(x3, 7, 4*(1<<1) ); dump();
tbz(x3, 7, 4*(1<<2) ); dump();
tbz(x3, 7, 4*(1<<3) ); dump();
tbz(x3, 7, 4*(1<<4) ); dump();
tbz(x3, 7, 4*(1<<5) ); dump();
tbz(x3, 7, 4*(1<<6) ); dump();
tbz(x3, 7, 4*(1<<7) ); dump();
tbz(x3, 7, 4*(1<<8) ); dump();
tbz(x3, 7, 4*(1<<9) ); dump();
tbz(x3, 7, 4*(1<<10) ); dump();
tbz(x3, 7, 4*(1<<11) ); dump();
tbz(x3, 7, 4*(1<<12) ); dump();
tbz(x3, 7, 4*((1<<13)-1) ); dump();
//Undinditional_branch0:0
b(4*((1<<16)-1) ); dump();
b(-4*(1<<25) ); dump();
b(-4*(1<<24) ); dump();
b(-4*(1<<23) ); dump();
b(-4*(1<<22) ); dump();
b(-4*(1<<21) ); dump();
b(-4*(1<<20) ); dump();
b(-4*(1<<19) ); dump();
b(-4*(1<<18) ); dump();
b(-4*(1<<17) ); dump();
b(-4*(1<<16) ); dump();
b(-4*(1<<15) ); dump();
b(-4*(1<<14) ); dump();
b(-4*(1<<13) ); dump();
b(-4*(1<<12) ); dump();
b(-4*(1<<11) ); dump();
b(-4*(1<<10) ); dump();
b(-4*(1<<9) ); dump();
b(-4*(1<<8) ); dump();
b(-4*(1<<7) ); dump();
b(-4*(1<<6) ); dump();
b(-4*(1<<5) ); dump();
b(-4*(1<<4) ); dump();
b(-4*(1<<3) ); dump();
b(-4*(1<<2) ); dump();
b(-4*(1<<1) ); dump();
b(-4*(1<<0) ); dump();
b(0 ); dump();
b(4*(1<<0) ); dump();
b(4*(1<<1) ); dump();
b(4*(1<<2) ); dump();
b(4*(1<<3) ); dump();
b(4*(1<<4) ); dump();
b(4*(1<<5) ); dump();
b(4*(1<<6) ); dump();
b(4*(1<<7) ); dump();
b(4*(1<<8) ); dump();
b(4*(1<<9) ); dump();
b(4*(1<<10) ); dump();
b(4*(1<<11) ); dump();
b(4*(1<<12) ); dump();
b(4*(1<<13) ); dump();
b(4*(1<<14) ); dump();
b(4*(1<<15) ); dump();
b(4*(1<<16) ); dump();
b(4*(1<<17) ); dump();
b(4*(1<<18) ); dump();
b(4*(1<<19) ); dump();
b(4*(1<<20) ); dump();
b(4*(1<<21) ); dump();
b(4*(1<<22) ); dump();
b(4*(1<<23) ); dump();
b(4*(1<<24) ); dump();
b(4*((1<<25)-1) ); dump();
//Undinditional_branch1:0
bl(4*((1<<16)-1) ); dump();
bl(-4*(1<<25) ); dump();
bl(-4*(1<<24) ); dump();
bl(-4*(1<<23) ); dump();
bl(-4*(1<<22) ); dump();
bl(-4*(1<<21) ); dump();
bl(-4*(1<<20) ); dump();
bl(-4*(1<<19) ); dump();
bl(-4*(1<<18) ); dump();
bl(-4*(1<<17) ); dump();
bl(-4*(1<<16) ); dump();
bl(-4*(1<<15) ); dump();
bl(-4*(1<<14) ); dump();
bl(-4*(1<<13) ); dump();
bl(-4*(1<<12) ); dump();
bl(-4*(1<<11) ); dump();
bl(-4*(1<<10) ); dump();
bl(-4*(1<<9) ); dump();
bl(-4*(1<<8) ); dump();
bl(-4*(1<<7) ); dump();
bl(-4*(1<<6) ); dump();
bl(-4*(1<<5) ); dump();
bl(-4*(1<<4) ); dump();
bl(-4*(1<<3) ); dump();
bl(-4*(1<<2) ); dump();
bl(-4*(1<<1) ); dump();
bl(-4*(1<<0) ); dump();
bl(0 ); dump();
bl(4*(1<<0) ); dump();
bl(4*(1<<1) ); dump();
bl(4*(1<<2) ); dump();
bl(4*(1<<3) ); dump();
bl(4*(1<<4) ); dump();
bl(4*(1<<5) ); dump();
bl(4*(1<<6) ); dump();
bl(4*(1<<7) ); dump();
bl(4*(1<<8) ); dump();
bl(4*(1<<9) ); dump();
bl(4*(1<<10) ); dump();
bl(4*(1<<11) ); dump();
bl(4*(1<<12) ); dump();
bl(4*(1<<13) ); dump();
bl(4*(1<<14) ); dump();
bl(4*(1<<15) ); dump();
bl(4*(1<<16) ); dump();
bl(4*(1<<17) ); dump();
bl(4*(1<<18) ); dump();
bl(4*(1<<19) ); dump();
bl(4*(1<<20) ); dump();
bl(4*(1<<21) ); dump();
bl(4*(1<<22) ); dump();
bl(4*(1<<23) ); dump();
bl(4*(1<<24) ); dump();
bl(4*((1<<25)-1) ); dump();
//Unconditional_branch_register0:0
blr(x7 ); dump();
blr(x0 ); dump();
blr(x1 ); dump();
blr(x2 ); dump();
blr(x4 ); dump();
blr(x8 ); dump();
blr(x16 ); dump();
blr(x30 ); dump();
br(x7 ); dump();
br(x0 ); dump();
br(x1 ); dump();
br(x2 ); dump();
br(x4 ); dump();
br(x8 ); dump();
br(x16 ); dump();
br(x30 ); dump();
//Unconditional_branch_register1:0
ret(x7 ); dump();
ret(x0 ); dump();
ret(x1 ); dump();
ret(x2 ); dump();
ret(x4 ); dump();
ret(x8 ); dump();
ret(x16 ); dump();
ret(x30 ); dump();
//Exception_generation_and_return0:0
brk(0xe38e ); dump();
brk(0 ); dump();
brk(1 ); dump();
brk(2 ); dump();
brk(4 ); dump();
brk(8 ); dump();
brk(16 ); dump();
brk(32 ); dump();
brk(64 ); dump();
brk(128 ); dump();
brk(256 ); dump();
brk(512 ); dump();
brk(1024 ); dump();
brk(2048 ); dump();
brk(4096 ); dump();
brk(8191 ); dump();
brk(1<<14 ); dump();
brk(1<<15 ); dump();
brk((1<<16)-1 ); dump();
hlt(0xe38e ); dump();
hlt(0 ); dump();
hlt(1 ); dump();
hlt(2 ); dump();
hlt(4 ); dump();
hlt(8 ); dump();
hlt(16 ); dump();
hlt(32 ); dump();
hlt(64 ); dump();
hlt(128 ); dump();
hlt(256 ); dump();
hlt(512 ); dump();
hlt(1024 ); dump();
hlt(2048 ); dump();
hlt(4096 ); dump();
hlt(8191 ); dump();
hlt(1<<14 ); dump();
hlt(1<<15 ); dump();
hlt((1<<16)-1 ); dump();
hvc(0xe38e ); dump();
hvc(0 ); dump();
hvc(1 ); dump();
hvc(2 ); dump();
hvc(4 ); dump();
hvc(8 ); dump();
hvc(16 ); dump();
hvc(32 ); dump();
hvc(64 ); dump();
hvc(128 ); dump();
hvc(256 ); dump();
hvc(512 ); dump();
hvc(1024 ); dump();
hvc(2048 ); dump();
hvc(4096 ); dump();
hvc(8191 ); dump();
hvc(1<<14 ); dump();
hvc(1<<15 ); dump();
hvc((1<<16)-1 ); dump();
smc(0xe38e ); dump();
smc(0 ); dump();
smc(1 ); dump();
smc(2 ); dump();
smc(4 ); dump();
smc(8 ); dump();
smc(16 ); dump();
smc(32 ); dump();
smc(64 ); dump();
smc(128 ); dump();
smc(256 ); dump();
smc(512 ); dump();
smc(1024 ); dump();
smc(2048 ); dump();
smc(4096 ); dump();
smc(8191 ); dump();
smc(1<<14 ); dump();
smc(1<<15 ); dump();
smc((1<<16)-1 ); dump();
svc(0xe38e ); dump();
svc(0 ); dump();
svc(1 ); dump();
svc(2 ); dump();
svc(4 ); dump();
svc(8 ); dump();
svc(16 ); dump();
svc(32 ); dump();
svc(64 ); dump();
svc(128 ); dump();
svc(256 ); dump();
svc(512 ); dump();
svc(1024 ); dump();
svc(2048 ); dump();
svc(4096 ); dump();
svc(8191 ); dump();
svc(1<<14 ); dump();
svc(1<<15 ); dump();
svc((1<<16)-1 ); dump();
//Exception_generation_and_return1:0
eret();//Exception_generation_and_return2:0
dcps1(0xe38e ); dump();
dcps1(0 ); dump();
dcps1(1 ); dump();
dcps1(2 ); dump();
dcps1(4 ); dump();
dcps1(8 ); dump();
dcps1(16 ); dump();
dcps1(32 ); dump();
dcps1(64 ); dump();
dcps1(128 ); dump();
dcps1(256 ); dump();
dcps1(512 ); dump();
dcps1(1024 ); dump();
dcps1(2048 ); dump();
dcps1(4096 ); dump();
dcps1(8191 ); dump();
dcps1(1<<14 ); dump();
dcps1(1<<15 ); dump();
dcps1((1<<16)-1 ); dump();
dcps2(0xe38e ); dump();
dcps2(0 ); dump();
dcps2(1 ); dump();
dcps2(2 ); dump();
dcps2(4 ); dump();
dcps2(8 ); dump();
dcps2(16 ); dump();
dcps2(32 ); dump();
dcps2(64 ); dump();
dcps2(128 ); dump();
dcps2(256 ); dump();
dcps2(512 ); dump();
dcps2(1024 ); dump();
dcps2(2048 ); dump();
dcps2(4096 ); dump();
dcps2(8191 ); dump();
dcps2(1<<14 ); dump();
dcps2(1<<15 ); dump();
dcps2((1<<16)-1 ); dump();
dcps3(0xe38e ); dump();
dcps3(0 ); dump();
dcps3(1 ); dump();
dcps3(2 ); dump();
dcps3(4 ); dump();
dcps3(8 ); dump();
dcps3(16 ); dump();
dcps3(32 ); dump();
dcps3(64 ); dump();
dcps3(128 ); dump();
dcps3(256 ); dump();
dcps3(512 ); dump();
dcps3(1024 ); dump();
dcps3(2048 ); dump();
dcps3(4096 ); dump();
dcps3(8191 ); dump();
dcps3(1<<14 ); dump();
dcps3(1<<15 ); dump();
dcps3((1<<16)-1 ); dump();
//Exception_generation_and_return3:0
drps();//Hint_instructions0:0
nop();yield();wfe();wfi();sev();sevl();//Hint_instructions1:0
hint(63 ); dump();
hint(0 ); dump();
hint(1 ); dump();
hint(2 ); dump();
hint(4 ); dump();
hint(8 ); dump();
hint(16 ); dump();
hint(32 ); dump();
hint(64 ); dump();
hint(127 ); dump();
//Barriers_and_CLREX_instructions0:0
clrex(7 ); dump();
clrex(0 ); dump();
clrex(1 ); dump();
clrex(2 ); dump();
clrex(4 ); dump();
clrex(8 ); dump();
clrex(15 ); dump();
//Barriers_and_CLREX_instructions1:0
dsb(SY ); dump();
dsb(ST ); dump();
dsb(LD ); dump();
dsb(ISH ); dump();
dsb(ISHST ); dump();
dsb(ISHLD ); dump();
dsb(NSH ); dump();
dsb(NSHST ); dump();
dsb(NSHLD ); dump();
dsb(OSH ); dump();
dsb(OSHST ); dump();
dsb(OSHLD ); dump();
dmb(SY ); dump();
dmb(ST ); dump();
dmb(LD ); dump();
dmb(ISH ); dump();
dmb(ISHST ); dump();
dmb(ISHLD ); dump();
dmb(NSH ); dump();
dmb(NSHST ); dump();
dmb(NSHLD ); dump();
dmb(OSH ); dump();
dmb(OSHST ); dump();
dmb(OSHLD ); dump();
//Barriers_and_CLREX_instructions2:0
csdb();esb();isb(SY);
psb_csync();
//Pointer_authentication_instructions0:0
pacia(x7, x7 ); dump();
pacia(x0, x7 ); dump();
pacia(x1, x7 ); dump();
pacia(x2, x7 ); dump();
pacia(x4, x7 ); dump();
pacia(x8, x7 ); dump();
pacia(x16, x7 ); dump();
pacia(x30, x7 ); dump();
pacia(x7, x7 ); dump();
pacia(x7, x0 ); dump();
pacia(x7, x1 ); dump();
pacia(x7, x2 ); dump();
pacia(x7, x4 ); dump();
pacia(x7, x8 ); dump();
pacia(x7, x16 ); dump();
pacia(x7, x30 ); dump();
pacia(x7, sp ); dump();
//Pointer_authentication_instructions1:0
paciza(x7 ); dump();
paciza(x0 ); dump();
paciza(x1 ); dump();
paciza(x2 ); dump();
paciza(x4 ); dump();
paciza(x8 ); dump();
paciza(x16 ); dump();
paciza(x30 ); dump();
//Pointer_authentication_instructions2:0
pacia1716();paciasp();paciaz();//Pointer_authentication_instructions3:0
pacib(x7, x7 ); dump();
pacib(x0, x7 ); dump();
pacib(x1, x7 ); dump();
pacib(x2, x7 ); dump();
pacib(x4, x7 ); dump();
pacib(x8, x7 ); dump();
pacib(x16, x7 ); dump();
pacib(x30, x7 ); dump();
pacib(x7, x7 ); dump();
pacib(x7, x0 ); dump();
pacib(x7, x1 ); dump();
pacib(x7, x2 ); dump();
pacib(x7, x4 ); dump();
pacib(x7, x8 ); dump();
pacib(x7, x16 ); dump();
pacib(x7, x30 ); dump();
pacib(x7, sp ); dump();
//Pointer_authentication_instructions4:0
pacizb(x7 ); dump();
pacizb(x0 ); dump();
pacizb(x1 ); dump();
pacizb(x2 ); dump();
pacizb(x4 ); dump();
pacizb(x8 ); dump();
pacizb(x16 ); dump();
pacizb(x30 ); dump();
//Pointer_authentication_instructions5:0
pacib1716();pacibsp();pacibz();//Pointer_authentication_instructions6:0
pacda(x7, x7 ); dump();
pacda(x0, x7 ); dump();
pacda(x1, x7 ); dump();
pacda(x2, x7 ); dump();
pacda(x4, x7 ); dump();
pacda(x8, x7 ); dump();
pacda(x16, x7 ); dump();
pacda(x30, x7 ); dump();
pacda(x7, x7 ); dump();
pacda(x7, x0 ); dump();
pacda(x7, x1 ); dump();
pacda(x7, x2 ); dump();
pacda(x7, x4 ); dump();
pacda(x7, x8 ); dump();
pacda(x7, x16 ); dump();
pacda(x7, x30 ); dump();
pacda(x7, sp ); dump();
pacdb(x7, x7 ); dump();
pacdb(x0, x7 ); dump();
pacdb(x1, x7 ); dump();
pacdb(x2, x7 ); dump();
pacdb(x4, x7 ); dump();
pacdb(x8, x7 ); dump();
pacdb(x16, x7 ); dump();
pacdb(x30, x7 ); dump();
pacdb(x7, x7 ); dump();
pacdb(x7, x0 ); dump();
pacdb(x7, x1 ); dump();
pacdb(x7, x2 ); dump();
pacdb(x7, x4 ); dump();
pacdb(x7, x8 ); dump();
pacdb(x7, x16 ); dump();
pacdb(x7, x30 ); dump();
pacdb(x7, sp ); dump();
//Pointer_authentication_instructions7:0
pacdza(x7 ); dump();
pacdza(x0 ); dump();
pacdza(x1 ); dump();
pacdza(x2 ); dump();
pacdza(x4 ); dump();
pacdza(x8 ); dump();
pacdza(x16 ); dump();
pacdza(x30 ); dump();
pacdzb(x7 ); dump();
pacdzb(x0 ); dump();
pacdzb(x1 ); dump();
pacdzb(x2 ); dump();
pacdzb(x4 ); dump();
pacdzb(x8 ); dump();
pacdzb(x16 ); dump();
pacdzb(x30 ); dump();
//Pointer_authentication_instructions8:0
pacga(x7, x7, x7 ); dump();
pacga(x0, x7, x7 ); dump();
pacga(x1, x7, x7 ); dump();
pacga(x2, x7, x7 ); dump();
pacga(x4, x7, x7 ); dump();
pacga(x8, x7, x7 ); dump();
pacga(x16, x7, x7 ); dump();
pacga(x30, x7, x7 ); dump();
pacga(x7, x7, x7 ); dump();
pacga(x7, x0, x7 ); dump();
pacga(x7, x1, x7 ); dump();
pacga(x7, x2, x7 ); dump();
pacga(x7, x4, x7 ); dump();
pacga(x7, x8, x7 ); dump();
pacga(x7, x16, x7 ); dump();
pacga(x7, x30, x7 ); dump();
pacga(x7, x7, x7 ); dump();
pacga(x7, x7, x0 ); dump();
pacga(x7, x7, x1 ); dump();
pacga(x7, x7, x2 ); dump();
pacga(x7, x7, x4 ); dump();
pacga(x7, x7, x8 ); dump();
pacga(x7, x7, x16 ); dump();
pacga(x7, x7, x30 ); dump();
pacga(x7, x7, sp ); dump();
//Pointer_authentication_instructions9:0
autia(x7, x7 ); dump();
autia(x0, x7 ); dump();
autia(x1, x7 ); dump();
autia(x2, x7 ); dump();
autia(x4, x7 ); dump();
autia(x8, x7 ); dump();
autia(x16, x7 ); dump();
autia(x30, x7 ); dump();
autia(x7, x7 ); dump();
autia(x7, x0 ); dump();
autia(x7, x1 ); dump();
autia(x7, x2 ); dump();
autia(x7, x4 ); dump();
autia(x7, x8 ); dump();
autia(x7, x16 ); dump();
autia(x7, x30 ); dump();
autia(x7, sp ); dump();
autib(x7, x7 ); dump();
autib(x0, x7 ); dump();
autib(x1, x7 ); dump();
autib(x2, x7 ); dump();
autib(x4, x7 ); dump();
autib(x8, x7 ); dump();
autib(x16, x7 ); dump();
autib(x30, x7 ); dump();
autib(x7, x7 ); dump();
autib(x7, x0 ); dump();
autib(x7, x1 ); dump();
autib(x7, x2 ); dump();
autib(x7, x4 ); dump();
autib(x7, x8 ); dump();
autib(x7, x16 ); dump();
autib(x7, x30 ); dump();
autib(x7, sp ); dump();
autda(x7, x7 ); dump();
autda(x0, x7 ); dump();
autda(x1, x7 ); dump();
autda(x2, x7 ); dump();
autda(x4, x7 ); dump();
autda(x8, x7 ); dump();
autda(x16, x7 ); dump();
autda(x30, x7 ); dump();
autda(x7, x7 ); dump();
autda(x7, x0 ); dump();
autda(x7, x1 ); dump();
autda(x7, x2 ); dump();
autda(x7, x4 ); dump();
autda(x7, x8 ); dump();
autda(x7, x16 ); dump();
autda(x7, x30 ); dump();
autda(x7, sp ); dump();
autdb(x7, x7 ); dump();
autdb(x0, x7 ); dump();
autdb(x1, x7 ); dump();
autdb(x2, x7 ); dump();
autdb(x4, x7 ); dump();
autdb(x8, x7 ); dump();
autdb(x16, x7 ); dump();
autdb(x30, x7 ); dump();
autdb(x7, x7 ); dump();
autdb(x7, x0 ); dump();
autdb(x7, x1 ); dump();
autdb(x7, x2 ); dump();
autdb(x7, x4 ); dump();
autdb(x7, x8 ); dump();
autdb(x7, x16 ); dump();
autdb(x7, x30 ); dump();
autdb(x7, sp ); dump();
//Pointer_authentication_instructions10:0
autiza(x7 ); dump();
autiza(x0 ); dump();
autiza(x1 ); dump();
autiza(x2 ); dump();
autiza(x4 ); dump();
autiza(x8 ); dump();
autiza(x16 ); dump();
autiza(x30 ); dump();
autizb(x7 ); dump();
autizb(x0 ); dump();
autizb(x1 ); dump();
autizb(x2 ); dump();
autizb(x4 ); dump();
autizb(x8 ); dump();
autizb(x16 ); dump();
autizb(x30 ); dump();
autdza(x7 ); dump();
autdza(x0 ); dump();
autdza(x1 ); dump();
autdza(x2 ); dump();
autdza(x4 ); dump();
autdza(x8 ); dump();
autdza(x16 ); dump();
autdza(x30 ); dump();
autdzb(x7 ); dump();
autdzb(x0 ); dump();
autdzb(x1 ); dump();
autdzb(x2 ); dump();
autdzb(x4 ); dump();
autdzb(x8 ); dump();
autdzb(x16 ); dump();
autdzb(x30 ); dump();
//Pointer_authentication_instructions11:0
autia1716();autiasp();autiaz();autib1716();autibsp();autibz();//Pointer_authentication_instructions12:0
xpacd(x7 ); dump();
xpacd(x0 ); dump();
xpacd(x1 ); dump();
xpacd(x2 ); dump();
xpacd(x4 ); dump();
xpacd(x8 ); dump();
xpacd(x16 ); dump();
xpacd(x30 ); dump();
xpaci(x7 ); dump();
xpaci(x0 ); dump();
xpaci(x1 ); dump();
xpaci(x2 ); dump();
xpaci(x4 ); dump();
xpaci(x8 ); dump();
xpaci(x16 ); dump();
xpaci(x30 ); dump();
//Pointer_authentication_instructions13:0
xpaclri();//Pointer_authentication_instructions14:0
retaa();retab();eretaa();eretab();//Pointer_authentication_instructions15:0
braaz(x7 ); dump();
braaz(x0 ); dump();
braaz(x1 ); dump();
braaz(x2 ); dump();
braaz(x4 ); dump();
braaz(x8 ); dump();
braaz(x16 ); dump();
braaz(x30 ); dump();
brabz(x7 ); dump();
brabz(x0 ); dump();
brabz(x1 ); dump();
brabz(x2 ); dump();
brabz(x4 ); dump();
brabz(x8 ); dump();
brabz(x16 ); dump();
brabz(x30 ); dump();
blraaz(x7 ); dump();
blraaz(x0 ); dump();
blraaz(x1 ); dump();
blraaz(x2 ); dump();
blraaz(x4 ); dump();
blraaz(x8 ); dump();
blraaz(x16 ); dump();
blraaz(x30 ); dump();
blrabz(x7 ); dump();
blrabz(x0 ); dump();
blrabz(x1 ); dump();
blrabz(x2 ); dump();
blrabz(x4 ); dump();
blrabz(x8 ); dump();
blrabz(x16 ); dump();
blrabz(x30 ); dump();
//Pointer_authentication_instructions16:0
braa(x7, x7 ); dump();
braa(x0, x7 ); dump();
braa(x1, x7 ); dump();
braa(x2, x7 ); dump();
braa(x4, x7 ); dump();
braa(x8, x7 ); dump();
braa(x16, x7 ); dump();
braa(x30, x7 ); dump();
braa(x7, x7 ); dump();
braa(x7, x0 ); dump();
braa(x7, x1 ); dump();
braa(x7, x2 ); dump();
braa(x7, x4 ); dump();
braa(x7, x8 ); dump();
braa(x7, x16 ); dump();
braa(x7, x30 ); dump();
braa(x7, sp ); dump();
brab(x7, x7 ); dump();
brab(x0, x7 ); dump();
brab(x1, x7 ); dump();
brab(x2, x7 ); dump();
brab(x4, x7 ); dump();
brab(x8, x7 ); dump();
brab(x16, x7 ); dump();
brab(x30, x7 ); dump();
brab(x7, x7 ); dump();
brab(x7, x0 ); dump();
brab(x7, x1 ); dump();
brab(x7, x2 ); dump();
brab(x7, x4 ); dump();
brab(x7, x8 ); dump();
brab(x7, x16 ); dump();
brab(x7, x30 ); dump();
brab(x7, sp ); dump();
blraa(x7, x7 ); dump();
blraa(x0, x7 ); dump();
blraa(x1, x7 ); dump();
blraa(x2, x7 ); dump();
blraa(x4, x7 ); dump();
blraa(x8, x7 ); dump();
blraa(x16, x7 ); dump();
blraa(x30, x7 ); dump();
blraa(x7, x7 ); dump();
blraa(x7, x0 ); dump();
blraa(x7, x1 ); dump();
blraa(x7, x2 ); dump();
blraa(x7, x4 ); dump();
blraa(x7, x8 ); dump();
blraa(x7, x16 ); dump();
blraa(x7, x30 ); dump();
blraa(x7, sp ); dump();
blrab(x7, x7 ); dump();
blrab(x0, x7 ); dump();
blrab(x1, x7 ); dump();
blrab(x2, x7 ); dump();
blrab(x4, x7 ); dump();
blrab(x8, x7 ); dump();
blrab(x16, x7 ); dump();
blrab(x30, x7 ); dump();
blrab(x7, x7 ); dump();
blrab(x7, x0 ); dump();
blrab(x7, x1 ); dump();
blrab(x7, x2 ); dump();
blrab(x7, x4 ); dump();
blrab(x7, x8 ); dump();
blrab(x7, x16 ); dump();
blrab(x7, x30 ); dump();
blrab(x7, sp ); dump();
//Pointer_authentication_instructions17:0
ldraa(x7, ptr( x5 ) ); dump();
ldraa(x0, ptr( x5 ) ); dump();
ldraa(x1, ptr( x5 ) ); dump();
ldraa(x2, ptr( x5 ) ); dump();
ldraa(x4, ptr( x5 ) ); dump();
ldraa(x8, ptr( x5 ) ); dump();
ldraa(x16, ptr( x5 ) ); dump();
ldraa(x30, ptr( x5 ) ); dump();
ldraa(x7, ptr( x5 ) ); dump();
ldraa(x7, ptr( x5 ) ); dump();
ldraa(x7, ptr( x15 ) ); dump();
ldraa(x7, ptr( x29 ) ); dump();
ldraa(x7, ptr( x5 ) ); dump();
ldrab(x7, ptr( x5 ) ); dump();
ldrab(x0, ptr( x5 ) ); dump();
ldrab(x1, ptr( x5 ) ); dump();
ldrab(x2, ptr( x5 ) ); dump();
ldrab(x4, ptr( x5 ) ); dump();
ldrab(x8, ptr( x5 ) ); dump();
ldrab(x16, ptr( x5 ) ); dump();
ldrab(x30, ptr( x5 ) ); dump();
ldrab(x7, ptr( x5 ) ); dump();
ldrab(x7, ptr( x5 ) ); dump();
ldrab(x7, ptr( x15 ) ); dump();
ldrab(x7, ptr( x29 ) ); dump();
ldrab(x7, ptr( x5 ) ); dump();
//Pointer_authentication_instructions17:1
ldraa(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x0, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x1, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x2, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x4, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x8, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x16, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x30, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x7, ptr( x15, 8*((1<<6)-1) ) ); dump();
ldraa(x7, ptr( x29, 8*((1<<6)-1) ) ); dump();
ldraa(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<9) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<8) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<7) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<6) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<5) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<4) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<3) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<2) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<1) ) ); dump();
ldraa(x7, ptr( x5, -8*(1<<0) ) ); dump();
ldraa(x7, ptr( x5, 0 ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<0) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<1) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<2) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<3) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<4) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<5) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<6) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<7) ) ); dump();
ldraa(x7, ptr( x5, 8*(1<<8) ) ); dump();
ldraa(x7, ptr( x5, 8*((1<<9)-1) ) ); dump();
ldraa(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x0, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x1, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x2, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x4, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x8, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x16, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x30, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x7, ptr( x15, 8*((1<<6)-1) ) ); dump();
ldrab(x7, ptr( x29, 8*((1<<6)-1) ) ); dump();
ldrab(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<9) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<8) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<7) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<6) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<5) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<4) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<3) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<2) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<1) ) ); dump();
ldrab(x7, ptr( x5, -8*(1<<0) ) ); dump();
ldrab(x7, ptr( x5, 0 ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<0) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<1) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<2) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<3) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<4) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<5) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<6) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<7) ) ); dump();
ldrab(x7, ptr( x5, 8*(1<<8) ) ); dump();
ldrab(x7, ptr( x5, 8*((1<<9)-1) ) ); dump();
ldrab(x7, ptr( x5, 8*((1<<6)-1) ) ); dump();
//Pointer_authentication_instructions18:0
ldraa(x7, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x0, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x1, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x2, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x4, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x8, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x16, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x30, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x0, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x1, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x2, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x4, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x8, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x16, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x30, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(sp, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<9)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<8)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<7)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<6)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<5)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<4)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<3)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<2)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<1)) ); dump();
ldraa(x7, pre_ptr(x7, -8*(1<<0)) ); dump();
ldraa(x7, pre_ptr(x7, 0) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<0)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<1)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<2)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<3)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<4)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<5)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<6)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<7)) ); dump();
ldraa(x7, pre_ptr(x7, 8*(1<<8)) ); dump();
ldraa(x7, pre_ptr(x7, 8*((1<<9)-1)) ); dump();
ldrab(x7, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x0, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x1, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x2, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x4, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x8, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x16, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x30, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x0, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x1, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x2, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x4, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x8, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x16, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x30, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(sp, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x7, 8*((1<<6)-1)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<9)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<8)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<7)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<6)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<5)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<4)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<3)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<2)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<1)) ); dump();
ldrab(x7, pre_ptr(x7, -8*(1<<0)) ); dump();
ldrab(x7, pre_ptr(x7, 0) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<0)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<1)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<2)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<3)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<4)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<5)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<6)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<7)) ); dump();
ldrab(x7, pre_ptr(x7, 8*(1<<8)) ); dump();
ldrab(x7, pre_ptr(x7, 8*((1<<9)-1)) ); dump();
    }
    void gen()
    {
        gen0();
    }
